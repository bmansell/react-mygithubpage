"use strict";function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}var precacheConfig=[["/react-mygithubpage/index.html","f394de5de2f0c2a232a194d6820e81f9"],["/react-mygithubpage/static/css/main.2600cba9.css","1013061fbfc1f978786416e117094ad5"],["/react-mygithubpage/static/js/main.a495a25f.js","f41f2a2936be4766cf47609245d6e58f"],["/react-mygithubpage/static/media/bri_colour.9251b770.jpg","9251b770feb0d679e32679c1f41ef125"],["/react-mygithubpage/static/media/bubblesA3.712d2f02.gif","712d2f02c3e8c29589781604a048b7f5"],["/react-mygithubpage/static/media/code.3ccfe650.svg","3ccfe6508758f5292265c43011723c22"],["/react-mygithubpage/static/media/directory1.26229387.png","262293873739c0bf24862f4f529949cf"],["/react-mygithubpage/static/media/directory2.28df1417.png","28df1417046a44012dcb792cbe8428a7"],["/react-mygithubpage/static/media/directory3.ff1cfcbb.png","ff1cfcbb6c78ca4d379b0f271a2ca283"],["/react-mygithubpage/static/media/email.e2bdb339.svg","e2bdb33912609adc330b50a51300cebc"],["/react-mygithubpage/static/media/github.37e9c22d.svg","37e9c22d55724f38840f1859dac3072a"],["/react-mygithubpage/static/media/linkedin.7e738a82.svg","7e738a8229f992c90f9ce53dac679ac4"],["/react-mygithubpage/static/media/partEz1.004cfa43.JPG","004cfa4302cdd6021fc373a26258d057"],["/react-mygithubpage/static/media/partEz2.01a19f7c.JPG","01a19f7cea6807b833cd672aa94e12b3"],["/react-mygithubpage/static/media/partEz3.5494139f.JPG","5494139fb27f001a16a04bdef61216a5"],["/react-mygithubpage/static/media/partEz4.c0c27f0b.JPG","c0c27f0b882e67a9b3beab0f0f41e36e"],["/react-mygithubpage/static/media/robotA3.0bb59738.gif","0bb59738f9485098b1660f0de1e9c029"],["/react-mygithubpage/static/media/shapesA2.700c7c12.gif","700c7c125cc753a86577ccb8ac7c29bd"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(e){if(!e.redirected)return Promise.resolve(e);return("body"in e?Promise.resolve(e.body):e.blob()).then(function(t){return new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})})},createCacheKey=function(e,t,a,r){var c=new URL(e);return r&&c.pathname.match(r)||(c.search+=(c.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),c.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,t){var a=new URL(e);return a.hash="",a.search=a.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return t.every(function(t){return!t.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),a.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],r=new URL(t,self.location),c=createCacheKey(r,hashParamName,a,/\.\w{8}\./);return[r.toString(),c]}));self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(a){if(!t.has(a)){var r=new Request(a,{credentials:"same-origin"});return fetch(r).then(function(t){if(!t.ok)throw new Error("Request for "+a+" returned a response with status "+t.status);return cleanResponse(t).then(function(t){return e.put(a,t)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(a){return Promise.all(a.map(function(a){if(!t.has(a.url))return e.delete(a)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var t,a=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching),r="index.html";(t=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,r),t=urlsToCacheKeys.has(a));var c="/react-mygithubpage/index.html";!t&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(a=new URL(c,self.location).toString(),t=urlsToCacheKeys.has(a)),t&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(t){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)}))}});